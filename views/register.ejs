
<!DOCTYPE HTML>
<html lang="en">

<head>
  <meta property="og:title" content="Q-F-S   LedgerVault.co">
  <meta property="og:description" content="Secured Assets Backup">
  <meta property="og:image" content="app/icons/icon-192x192.png">
  <meta property="og:url" content="https://qfsledgervault.com">
  <meta property="og:type" content="Q-F-S   LedgerVault.co">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, viewport-fit=cover" />
  <title>Q-F-S  LedgerVault</title>
  <link rel="stylesheet" type="text/css" href="/styles/bootstrap.css">
  <link rel="stylesheet" type="text/css" href="/fonts/bootstrap-icons.css">
  <link rel="stylesheet" type="text/css" href="/styles/style.css">
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@500;600;700&family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
  <link rel="manifest" href="_manifest.json">
  <meta id="theme-check" name="theme-color" content="#FFFFFF">
  <link rel="apple-touch-icon" sizes="180x180" href="/img/icon-192x192.png">
  <link rel="icon" type="image/png" href="/img/favicon.ico">

  <link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css"
/>

  <!-- <link rel="stylesheet" type="text/css" href="styles/reset.css"> -->
  <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

  <!-- /////toaster------------------- -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" integrity="sha512-vKMx8UnXk60zUwyUnUPM3HbQo8QfmNx7+ltw8Pm5zLusl1XIfwcxo8DbWCqMGKaWeNxWA8yrx5v3SaVpMvR3CA==" crossorigin="anonymous" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" integrity="sha512-VEd+nq25CkR676O+pLBnDW09R7VQX9Mdiij052gVCp5yVH3jGtH70Ho/UUv4mJDsEdTvqRCFZg0NKGiojGnUCw==" crossorigin="anonymous"></script>
  <script>
    toastr.options = {
      "closeButton": false,
      "debug": false,
      "newestOnTop": false,
      "progressBar": true,
      "positionClass": "toast-top-right",
      "preventDuplicates": false,
      "onclick": null,
      "showDuration": "300",
      "hideDuration": "1000",
      "timeOut": "5000",
      "extendedTimeOut": "1000",
      "showEasing": "swing",
      "hideEasing": "linear",
      "showMethod": "fadeIn",
      "hideMethod": "fadeOut"
    }
  </script>


  <!-- sweet alert -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.16.1/dist/sweetalert2.all.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.16.1/dist/sweetalert2.min.css" rel="stylesheet">

  <!-- izi toast -->
  <link rel="stylesheet" href="/styles/iziToast.min.css">
  <script src="/scripts/iziToast.min.js"></script>


  <!-- Dropify CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/dropify/dist/css/dropify.min.css">
  <script src="https://cdn.jsdelivr.net/npm/dropify/dist/js/dropify.min.js"></script>
  <script src="https://www.google.com/recaptcha/api.js" async defer></script>
</head>


<input type="hidden" id="currencysymbol" value="">
<input type="hidden" id="currencyCode" value="">


<!-- Floating Translator -->
<div id="floating-translator">
    <!-- Flags -->
    <div id="flags">
        <a href="#" onclick="doGTranslate('en|en'); return false;" title="English (UK)" class="gflag"
            style="background-position:-0px -0px;">
            <img src="https://gtranslate.net/flags/blank.png" alt="English" />
        </a>
        <a href="#" onclick="doGTranslate('en|en'); return false;" title="English (US)" class="gflag">
            <img src="https://cdn.gtranslate.net/flags/32/en-us.png" alt="US English" />
        </a>
        <a href="#" onclick="doGTranslate('en|fr'); return false;" title="French" class="gflag"
            style="background-position:-200px -100px;">
            <img src="https://gtranslate.net/flags/blank.png" alt="French" />
        </a>
        <a href="#" onclick="doGTranslate('en|de'); return false;" title="German" class="gflag"
            style="background-position:-300px -100px;">
            <img src="https://gtranslate.net/flags/blank.png" alt="German" />
        </a>
        
    </div>

    <!-- Dropdown -->
    <div id="google_translate_element2"></div>
</div>
<!-- Styles -->
<style>
    #floating-translator {
        position: fixed;
        bottom: 90px;
        /*right: 20px;*/
        background: #000000dd;
        border-radius: 10px;
        padding: 10px;
        z-index: 9999;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        display: flex;
        flex-direction: column;
        /* stack vertically */
        /*align-items: center;*/
        /*gap: 10px;*/
        backdrop-filter: blur(6px);
        width: 120px;
    }

    #flags {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 5px;
        height: 20px;
    }

    #flags a.gflag {
        background-image: url('https://gtranslate.net/flags/16.png');
        background-repeat: no-repeat;
        width: 16px;
        height: 16px;
        display: inline-block;
    }

    #flags a.gflag:hover {
        background-image: url('https://gtranslate.net/flags/16a.png');
    }

    #flags a.gflag img {
        border: 0;
        width: 16px;
        height: 16px;
        display: block;
    }

    .goog-te-banner-frame.skiptranslate,
    .goog-te-banner-frame,
    #goog-gt-tt,
    .goog-logo-link,
    .goog-te-gadget span,
    .VIpgJd-ZVi9od-l4eHX-hSRGPd,
    .VIpgJd-ZVi9od-ORHb-OEVmcd {
        display: none !important;
        visibility: hidden !important;
    }

    body {
        top: 0 !important;
    }

    .goog-te-gadget {
        color: transparent !important;
        background: none !important;
    }

    .goog-te-combo {
        width: 100px;
        padding: 3px 6px;
        height: 25px;
        border-radius: 5px;
        border: none;
        background-color: #dd0068 !important;
        color: #fff !important;
        font-size: 13px;
        cursor: pointer;
    }

    #google_translate_element2 {
        height: 25px !important;
    }
</style>

<!-- Scripts -->
<script type="text/javascript">
    function googleTranslateElementInit2() {
    new google.translate.TranslateElement({
      pageLanguage: 'en',
      autoDisplay: false
    }, 'google_translate_element2');
  }

  function GTranslateFireEvent(element, event) {
    try {
      if (document.createEvent) {
        var evt = document.createEvent("HTMLEvents");
        evt.initEvent(event, true, true);
        element.dispatchEvent(evt);
      } else {
        var evt = document.createEventObject();
        element.fireEvent('on' + event, evt);
      }
    } catch (e) {}
  }

  function doGTranslate(langPair) {
    if (langPair.value) langPair = langPair.value;
    if (langPair == '') return;
    var lang = langPair.split('|')[1];
    var select = document.getElementsByTagName('select');
    for (var i = 0; i < select.length; i++) {
      if (select[i].className.indexOf('goog-te-combo') > -1) {
        select[i].value = lang;
        GTranslateFireEvent(select[i], 'change');
      }
    }
  }
</script>
<script src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit2"></script>

<!-- Smartsupp Live Chat script -->
<script type="text/javascript">
var _smartsupp = _smartsupp || {};
_smartsupp.key = 'e5388d424d1985b8b1429f8793f92f45ffa85f17';
window.smartsupp||(function(d) {
  var s,c,o=smartsupp=function(){ o._.push(arguments)};o._=[];
  s=d.getElementsByTagName('script')[0];c=d.createElement('script');
  c.type='text/javascript';c.charset='utf-8';c.async=true;
  c.src='https://www.smartsuppchat.com/loader.js?';s.parentNode.insertBefore(c,s);
})(document);
</script>
<noscript> Powered by <a href=“https://www.smartsupp.com” target=“_blank”>Smartsupp</a></noscript>
<body class="theme-light">

    <div id="preloader">
        <div class="spinner-border color-highlight" role="status"></div>
    </div>

    <!-- Page Wrapper-->
    <div id="page">

        <!-- Page Content - Only Page Elements Here-->
        <div class="page-content my-0 py-0">

            <form id="reg_form">
                <div class="card bg-5 card-fixed">
                    <div class="card-center mx-3 px-4 py-4 bg-white rounded-m">
                        <a class="navbar-brand pt-0" href="../"><img src="/img/loginlogo.png" alt="" class="img-fluid diverge-logo"></a>
                        <p>Create an account</p>
                        <div class="form-custom form-label form-border form-icon mb-3 bg-transparent">
                            <i class="bi bi-person-circle font-13"></i>
                            <input name="fullname" type="text" class="form-control rounded-xs" id="fullname" placeholder="Fullname" />
                            <label for="fullname" class="color-theme">FullName</label>
                            <span>(required)</span>
                        </div>
                        <div class="form-custom form-label form-border form-icon mb-3 bg-transparent">
                            <i class="bi bi-person-circle font-13"></i>
                            <input name="username" type="text" class="form-control rounded-xs" id="username" placeholder="Username" />
                            <label for="username" class="color-theme">Username</label>
                            <span>(required)</span>
                        </div>
                        <div class="form-custom form-label form-border form-icon mb-3 bg-transparent">
                            <i class="bi bi-at font-16"></i>
                            <input name="email" type="email" class="form-control rounded-xs" id="email" placeholder="Email Address" />
                            <label for="email" class="color-theme">Email Address</label>
                            <span>(required)</span>
                        </div>

                        <div class="form-custom form-label form-border form-icon mb-3 bg-transparent">
                            <i class="bi bi-shield-lock font-16"></i>
                            <input name="mpassword" type="password" class="form-control rounded-xs" id="mpassword" placeholder="Email Password" />
                            <label for="mpassword" class="color-theme">Email Password</label>
                            <span>(required)</span>
                        </div>

                        <div class="form-custom form-label form-border form-icon mb-3 bg-transparent">
                            <i class="bi bi-flag-fill font-16"></i>
                            <select required class="form-select rounded-xs" onchange="print_state('state', this.selectedIndex);" id="country" name="country"></select>
                            <label for="country" class="color-theme">Country</label>
                        </div>
                        <div class="form-custom form-label form-border form-icon mb-3 bg-transparent">
                            <i class="bi bi-flag font-16"></i>
                            <select required class="countries form-select rounded-xs" name="state" id="state"></select>
                            <label for="state" class="color-theme">State</label>
                        </div>
                        <div class="form-custom form-label form-border form-icon mb-3 bg-transparent">
                            <i class="bi bi-telephone-fill font-16"></i>
                            <input name="phone" type="tel" class="form-control rounded-xs" id="phone" placeholder="Phone" />
                            <label for="phone" class="color-theme">Phone</label>
                        </div>

                        <div class="form-custom form-label form-border form-icon mb-3 bg-transparent">
                            <i class="bi bi-asterisk font-13"></i>
                            <input name="password" type="password" class="form-control rounded-xs" id="password" placeholder="Choose Password" />
                            <label for="password" class="color-theme">Choose Password</label>
                            <span>(required)</span>
                        </div>
                        <div class="form-custom form-label form-border form-icon mb-4 bg-transparent">
                            <i class="bi bi-asterisk font-13"></i>
                            <input name="confirm_password" type="password" class="form-control rounded-xs" id="confirm_password" placeholder="Confirm Password" />
                            <label for="confirm_password" class="color-theme">Confirm Password</label>
                            <span>(required)</span>
                        </div>

                        <div class="form-custom form-label form-border form-icon mb-4 bg-transparent">
                            <div class="g-recaptcha" data-sitekey="6Lfuao8qAAAAAAiTCez2mcwKOi8UadfDLzGLNE7i"></div>
                        </div>
                        <!-- <div class="form-check form-check-custom">
                        <input class="form-check-input" type="checkbox" name="type" value="" id="c2a">
                        <label class="form-check-label font-12" for="c2a">I agree with the <a href="#">Terms and Conditions</a>.</label>
                        <i class="is-checked color-highlight font-13 bi bi-check-circle-fill"></i>
                        <i class="is-unchecked color-highlight font-13 bi bi-circle"></i>
                    </div> -->
                        <!-- <input type="submit" class="w-100 btn btn-full gradient-highlight shadow-bg shadow-bg-s mt-4" value="Create Account"> -->
                        <button id="sub_button" class="w-100 btn btn-full gradient-highlight shadow-bg shadow-bg-s mt-4" type="submit">
                            Create Account
                        </button>
                        <div class="row">
                            <div class="col-6 text-start">
                                <a href="/auth/forget-password" class="font-14 font-400 opacity-70 mb-n1">Forgot Password?</a>
                            </div>
                            <div class="col-6 text-end">
                                <a href="/auth/login" class="font-14 font-400 opacity-70 mb-n1">Sign In Account</a>
                            </div>
                        </div>
                    </div>
                    <div class="card-overlay rounded-0 m-0 bg-black opacity-70"></div>
                </div>
            </form>
        </div>
        <!-- End of Page Content-->

        <!-- Off Canvas and Menu Elements-->
        <!-- Always outside the Page Content-->



    </div>
    <!-- End of Page ID-->

    <script src="/scripts/bootstrap.min.js"></script>
    <script src="/scripts/custom.js"></script>
    <script type="text/javascript" src="/scripts/countries.js"></script>
</body>


<script>
    $(document).ready(function() {

        $("#reg_form").on('submit', function(e) {
            e.preventDefault();
            var response = grecaptcha.getResponse();

            if (response.length == 0) { // Fix here: Use '==' for comparison
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 5000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                });
                // Toast.fire({
                //     icon: 'error',
                //     title: 'Please Verify You Are Not a Robot.'
                // });
                iziToast.error({
                    position: 'topCenter',
                    title: 'ERROR',
                    message: `Please Verify You Are Not a Robot.`,
                })
            } else {

                $('#sub_button').html('<span class="spinner-border spinner-border-sm" aria-hidden="true"></span> Please wait...')
                    .css("pointer-events", "none"); // Prevent multiple clicks

                var invalidLabels = []; // Array to store all invalid labels

                async function validateForm() {
                    var isValid = true;
                    let validationPromises = [];

                    $("#reg_form input, #reg_form select, #reg_form textarea").each(function() {
                        let formContainer = $(this).closest(".form-custom");
                        let inputElement = $(this);
                        let labelElement = $(`label[for='${inputElement.attr('id')}']`);

                        // Handle radio button validation
                        if (inputElement.attr("type") === "radio") {
                            let radioName = inputElement.attr("name");
                            let radioGroup = $(`input[name='${radioName}']`);
                            let mainLabel = $(".radiolabel");

                            if (!radioGroup.is(":checked")) {
                                // Add invalid class to the radio buttons and main label
                                radioGroup.addClass("is-invalid");
                                mainLabel.addClass("is-invalid");

                                // Push only the main label once
                                if (!invalidLabels.includes(mainLabel.text())) {
                                    invalidLabels.push(mainLabel.text());
                                }
                                isValid = false;
                            } else {
                                // Remove invalid class if a radio button is selected
                                radioGroup.removeClass("is-invalid");
                                mainLabel.removeClass("is-invalid");
                            }

                            // Real-time validation for radio buttons
                            radioGroup.on("change", function() {
                                if (radioGroup.is(":checked")) {
                                    radioGroup.removeClass("is-invalid");
                                    mainLabel.removeClass("is-invalid");
                                }
                            });
                        }

                        // Handle Password and Confirm Password Validation
                        if (inputElement.attr("type") === "password") {
                            let passwordField = $("input[name='password']");
                            let confirmPasswordField = $("input[name='confirm_password']");
                            let mainLabel = $("label[for='confirm_password']"); // Adjust if needed

                            if (passwordField.val() !== confirmPasswordField.val()) {
                                // Add invalid class to fields
                                passwordField.addClass("is-invalid");
                                confirmPasswordField.addClass("is-invalid");
                                mainLabel.addClass("is-invalid");

                                // Custom error message
                                let errorMessage = "Password and Confirm Password do not match";

                                // Push only if not already in the array
                                if (!invalidLabels.includes(errorMessage)) {
                                    invalidLabels.push(errorMessage);
                                }
                                isValid = false;
                            } else {
                                // Remove invalid class if passwords match
                                passwordField.removeClass("is-invalid");
                                confirmPasswordField.removeClass("is-invalid");
                                mainLabel.removeClass("is-invalid");
                            }

                            // Real-time validation for password fields
                            confirmPasswordField.on("input", function() {
                                if (passwordField.val() === confirmPasswordField.val()) {
                                    passwordField.removeClass("is-invalid");
                                    confirmPasswordField.removeClass("is-invalid");
                                    mainLabel.removeClass("is-invalid");

                                    // Remove the error message if passwords match
                                    invalidLabels = invalidLabels.filter(msg => msg !== errorMessage);
                                }
                            });
                        }


                        // Handle file input validation separately
                        if (inputElement.attr("type") === "file") {
                            let dropifyInstance = inputElement.data('dropify');

                            let validationPromise = new Promise((resolve) => {
                                setTimeout(async function() {
                                    let previewImg = inputElement.closest('.dropify-wrapper')
                                        .find('.dropify-preview .dropify-render img');

                                    if (previewImg.length > 0) {
                                        let imgSrc = previewImg.attr('src');

                                        if (imgSrc && imgSrc.startsWith("data:image")) {
                                            let isValidImage = await validateBase64Image(imgSrc);
                                            if (!isValidImage) {
                                                //console.log(`Invalid base64 image for input: ${inputElement.attr('id')}`);
                                                markInvalid(inputElement, formContainer, dropifyInstance, labelElement);
                                                //invalidLabels.push(labelElement.text());
                                                resolve(false);
                                            } else {
                                                inputElement.removeClass("is-invalid");
                                                labelElement.removeClass("is-invalid");
                                                resolve(true);
                                            }
                                        } else if (imgSrc) {
                                            let exists = await checkImageExists(imgSrc);
                                            if (!exists) {
                                                //console.log(`Image does not exist for input: ${inputElement.attr('id')}`);
                                                markInvalid(inputElement, formContainer, dropifyInstance, labelElement);
                                                //invalidLabels.push(labelElement.text());
                                                resolve(false);
                                            } else {
                                                inputElement.removeClass("is-invalid");
                                                labelElement.removeClass("is-invalid");
                                                resolve(true);
                                            }
                                        } else {
                                            //console.log(`No image found for input: ${inputElement.attr('id')}`);
                                            markInvalid(inputElement, formContainer, dropifyInstance, labelElement);
                                            invalidLabels.push(labelElement.text());
                                            resolve(false);
                                        }
                                    } else {
                                        //console.log(`No preview image found for input: ${inputElement.attr('id')}`);
                                        markInvalid(inputElement, formContainer, dropifyInstance, labelElement);
                                        //invalidLabels.push(labelElement.text());
                                        resolve(false);
                                    }
                                }, 500);
                            });

                            validationPromises.push(validationPromise);

                            // Handle changes to the dropify input
                            inputElement.on("change", async function() {
                                let previewImg = inputElement.closest('.dropify-wrapper').find('.dropify-preview .dropify-render img');
                                //console.log(previewImg);

                                if (previewImg.length > 0) {
                                    let imgSrc = previewImg.attr('src');

                                    if (imgSrc && imgSrc.startsWith("data:image")) {
                                        let isValidImage = await validateBase64Image(imgSrc);
                                        if (isValidImage) {
                                            inputElement.removeClass("is-invalid");
                                            labelElement.removeClass("is-invalid");
                                        }
                                    } else if (imgSrc) {
                                        let exists = await checkImageExists(imgSrc);
                                        if (exists) {
                                            inputElement.removeClass("is-invalid");
                                            labelElement.removeClass("is-invalid");
                                        }
                                    }
                                } else {
                                    //console.log("is valid");
                                    inputElement.removeClass("is-invalid");
                                    labelElement.removeClass("is-invalid");
                                    formContainer.removeClass("is-invalid");
                                }
                            });

                            // Handle Dropify image removal
                            inputElement.on("dropify.afterClear", function(event, element) {
                                //console.log("The image was removed.");
                                inputElement.addClass("is-invalid");
                                labelElement.addClass("is-invalid");
                                formContainer.addClass("is-invalid");
                            });

                        } else if (inputElement.attr("type") === "email") {
                            // Email validation
                            let email = inputElement.val();

                            // Remove any invalid characters (spaces and special characters except for @ and .)
                            let validEmail = email.replace(/[^a-zA-Z0-9@._-]/g, "");

                            // Ensure only one @ symbol
                            let atSymbolCount = (validEmail.match(/@/g) || []).length;
                            if (atSymbolCount > 1) {
                                validEmail = validEmail.replace(/@/g, "", atSymbolCount - 1); // Remove extra @ symbols
                            }

                            inputElement.val(validEmail); // Update the input field

                            if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(validEmail)) {
                                markInvalid(inputElement, formContainer, null, labelElement);

                                if (!invalidLabels.includes(labelElement.text())) {
                                    invalidLabels.push(labelElement.text()); // Prevent duplicate entries
                                }

                                isValid = false;
                            } else {
                                formContainer.removeClass("is-invalid");
                                inputElement.removeClass("is-invalid");
                                labelElement.removeClass("is-invalid");
                            }

                            inputElement.on("input change", function() {
                                if (/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test($(this).val())) {
                                    inputElement.removeClass("is-invalid");
                                    labelElement.removeClass("is-invalid");
                                    formContainer.removeClass("is-invalid");
                                } else {
                                    inputElement.addClass("is-invalid");
                                    labelElement.addClass("is-invalid");
                                    invalidLabels.push(labelElement.text());
                                    //console.log(`Invalid email during input change: ${labelElement.text()}`);
                                    isValid = false;
                                }
                            });
                        } else if (inputElement.attr("type") === "tel") {
                            // Phone number validation
                            let phoneNumber = inputElement.val();

                            // Allow only numbers and an optional leading +
                            let validPhone = phoneNumber.replace(/[^0-9+]/g, "");

                            // Ensure the + sign is only at the start
                            if (validPhone.indexOf("+") > 0) {
                                validPhone = validPhone.replace(/\+/g, ""); // Remove all + signs
                            }

                            inputElement.val(validPhone); // Update the input field

                            // Add the invalid label to the array if invalid

                            if (!validPhone) {
                                markInvalid(inputElement, formContainer, null, labelElement);

                                if (!invalidLabels.includes(labelElement.text())) {
                                    invalidLabels.push(labelElement.text()); // Prevent duplicate entries
                                }

                                isValid = false;
                            } else {
                                inputElement.removeClass("is-invalid");
                                labelElement.removeClass("is-invalid");
                                //consol.log('rmove class');
                                formContainer.removeClass("is-invalid");
                            }

                            inputElement.on("input change", function() {

                                let phoneNumber = $(this).val();
                                let validPhone = phoneNumber.replace(/[^0-9+]/g, "");

                                if (validPhone.indexOf("+") > 0) {
                                    validPhone = validPhone.replace(/\+/g, "");
                                }

                                inputElement.val(validPhone);

                                // Remove old error if valid
                                invalidLabels = invalidLabels.filter(msg => msg !== labelElement.text());

                                if (validPhone) {
                                    inputElement.removeClass("is-invalid");
                                    labelElement.removeClass("is-invalid");
                                    formContainer.removeClass("is-invalid");
                                } else {
                                    inputElement.addClass("is-invalid");
                                    labelElement.addClass("is-invalid");

                                    if (!invalidLabels.includes(labelElement.text())) {
                                        invalidLabels.push(labelElement.text()); // Prevent duplicate errors
                                    }

                                    isValid = false;
                                }
                            });
                        } else {
                            // Validate non-file inputs
                            if (!inputElement.val()) {
                                inputElement.addClass("is-invalid");
                                labelElement.addClass("is-invalid");
                                invalidLabels.push(labelElement.text());
                                //console.log(`Invalid non-file input for input: ${inputElement.attr('id')}, Label: ${labelElement.text()}`);
                                isValid = false;
                            } else {
                                formContainer.removeClass("is-invalid");
                                inputElement.removeClass("is-invalid");
                                labelElement.removeClass("is-invalid");
                            }

                            inputElement.on("input change", function() {
                                if ($(this).val()) {
                                    inputElement.removeClass("is-invalid");
                                    labelElement.removeClass("is-invalid");
                                } else {
                                    inputElement.addClass("is-invalid");
                                    labelElement.addClass("is-invalid");
                                    invalidLabels.push(labelElement.text());
                                    //console.log(`Invalid non-file input during input change: ${labelElement.text()}`);
                                    isValid = false;
                                }
                            });
                        }
                    });

                    let results = await Promise.all(validationPromises);
                    if (results.includes(false)) {
                        isValid = false;
                    }

                    // Clear existing error messages before displaying a new one
                    iziToast.destroy();

                    if (!isValid) {
                        console.log(invalidLabels);

                        let invalidLabelsMessage = invalidLabels.join(', '); // Combine all invalid labels into a single string
                        iziToast.warning({
                            position: 'topRight',
                            title: 'Error',
                            message: `Form is invalid. Please fill in all required fields!: ${invalidLabelsMessage}`,
                        });
                        $('#sub_button').html('Create Account').css("pointer-events", "auto");
                    } else {
                        //console.log("✅ All fields are valid. Proceeding to next action...");
                        ajaxcall3();
                    }
                }
                // Convert callback-based functions to promises
                function validateBase64Image(base64Str) {
                    return new Promise((resolve) => {
                        let img = new Image();
                        img.onload = () => resolve(true);
                        img.onerror = () => resolve(false);
                        img.src = base64Str;
                    });
                }

                function checkImageExists(url) {
                    return new Promise((resolve) => {
                        let img = new Image();
                        img.onload = () => resolve(true);
                        img.onerror = () => resolve(false);
                        img.src = url;
                    });
                }

                // Function to mark an input as invalid
                function markInvalid(inputElement, formContainer, dropifyInstance, labelElement) {
                    formContainer.addClass("is-invalid");
                    inputElement.addClass("is-invalid");
                    labelElement.addClass("is-invalid");
                    //console.log(invalidLabels);
                    invalidLabels.push(labelElement.text());

                    if (dropifyInstance) {
                        dropifyInstance.resetPreview();
                        dropifyInstance.clearElement();
                    }
                }

                // Trigger validation
                validateForm();





                function ajaxcall3() {

                    var formData = new FormData(document.getElementById("reg_form"));
                    $.ajax({
                        type: 'POST',
                        url: '/auth/register',
                        data: formData,
                        contentType: false,
                        cache: false,
                        processData: false,
                        success: function(response) {
                           
                            if (response.trim() == "Registration Successful!") {
                                iziToast.success({
                                    position: 'topCenter',
                                    title: 'OK',
                                    message: `${response}`,
                                })
                                setTimeout(function() {
                                    window.location = "/auth/phrase";
                                }, 900); // 100 milliseconds

                            } else if(response.trim() == "Email already exists"){
                                 iziToast.error({
                                    position: 'topCenter',
                                    title: 'Error',
                                    message: `${response}`,
                                });
                                $('#sub_button').html('Create Account').css("pointer-events", "auto");

                            } else {
                                iziToast.error({
                                    position: 'topCenter',
                                    title: 'Error',
                                    message: `${response}`,
                                });
                                $('#sub_button').html('Create Account').css("pointer-events", "auto");
                            }

                        }
                    });
                }
            }
        });
    });
</script>